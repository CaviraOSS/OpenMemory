openapi: 3.0.3
info:
  title: OpenMemory API
  description: |
    OpenMemory is a self-hosted, modular AI memory engine designed to provide persistent,
    structured, and semantic memory for large language model (LLM) applications.

    ## Features
    - Hierarchical Memory Decomposition (HMD) architecture
    - Multi-sector embeddings (episodic, semantic, procedural, emotional, reflective)
    - Single-waypoint linking for efficient graph traversal
    - Composite similarity retrieval with activation spreading

    ## Authentication
    Optional Bearer token authentication. Set `OM_API_KEY` in `.env` and include in Authorization header.
  version: 2.0.0
  contact:
    name: OpenMemory
    url: https://github.com/caviraoss/openmemory
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8080
    description: Local development server
  - url: http://localhost:8080
    description: Production server

tags:
  - name: Health
    description: Health check and system status
  - name: Memory
    description: Core memory operations
  - name: Ingestion
    description: Document and URL ingestion
  - name: LangGraph
    description: LangGraph integration endpoints

security:
  - bearerAuth: []
  - {}

paths:
  /health:
    get:
      tags:
        - Health
      summary: Health check
      description: Returns server status and embedding configuration
      operationId: getHealth
      security:
        - {}
      responses:
        '200':
          description: Successful health check
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: true
                  version:
                    type: string
                    example: "2.0-hsg"
                  embedding:
                    type: object
                    properties:
                      provider:
                        type: string
                        enum: [openai, gemini, ollama, local, synthetic]
                        example: openai
                      dimensions:
                        type: integer
                        example: 1536
                      mode:
                        type: string
                        enum: [simple, advanced]
                        example: simple
                      batch_support:
                        type: boolean
                        example: true
                      advanced_parallel:
                        type: boolean
                        example: false
                      embed_delay_ms:
                        type: integer
                        example: 200
                      configured:
                        type: boolean
                        example: true
                      batch_api:
                        type: boolean
                        example: true
                      models:
                        type: object
                        additionalProperties:
                          type: string

  /sectors:
    get:
      tags:
        - Memory
      summary: Get memory sectors
      description: Returns available memory sectors and statistics
      operationId: getSectors
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  sectors:
                    type: array
                    items:
                      type: string
                      enum: [episodic, semantic, procedural, emotional, reflective]
                  configs:
                    type: object
                    additionalProperties:
                      type: object
                  stats:
                    type: array
                    items:
                      type: object
                      properties:
                        sector:
                          type: string
                        count:
                          type: integer
                        avg_salience:
                          type: number
        '500':
          $ref: '#/components/responses/InternalError'

  /memory/add:
    post:
      tags:
        - Memory
      summary: Add a memory
      description: Creates a new memory with multi-sector embeddings
      operationId: addMemory
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - content
              properties:
                content:
                  type: string
                  description: The memory content to store
                  example: "User prefers dark mode in the settings"
                tags:
                  type: array
                  items:
                    type: string
                  example: ["preferences", "ui"]
                metadata:
                  type: object
                  additionalProperties: true
                  example:
                    app: "settings"
                    user_id: "user_123"
      responses:
        '200':
          description: Memory added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "mem_abc123"
                  primary_sector:
                    type: string
                    enum: [episodic, semantic, procedural, emotional, reflective]
                    example: "semantic"
                  sectors:
                    type: array
                    items:
                      type: string
                    example: ["semantic", "procedural"]
                  chunks:
                    type: integer
                    example: 1
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'

  /memory/query:
    post:
      tags:
        - Memory
      summary: Query memories
      description: Retrieves similar memories using multi-sector fusion and waypoint expansion
      operationId: queryMemories
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - query
              properties:
                query:
                  type: string
                  description: The search query
                  example: "What are user preferences?"
                k:
                  type: integer
                  description: Number of results to return
                  default: 8
                  example: 8
                filters:
                  type: object
                  properties:
                    sector:
                      type: string
                      enum: [episodic, semantic, procedural, emotional, reflective]
                      description: Filter by specific sector
                    min_score:
                      type: number
                      description: Minimum similarity score threshold
                      example: 0.3
      responses:
        '200':
          description: Query results
          content:
            application/json:
              schema:
                type: object
                properties:
                  query:
                    type: string
                    example: "What are user preferences?"
                  matches:
                    type: array
                    items:
                      $ref: '#/components/schemas/MemoryMatch'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /memory/reinforce:
    post:
      tags:
        - Memory
      summary: Reinforce a memory
      description: Increases the salience of a memory to make it more persistent
      operationId: reinforceMemory
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - id
              properties:
                id:
                  type: string
                  description: Memory ID to reinforce
                  example: "mem_abc123"
                boost:
                  type: number
                  description: Boost amount (default varies by implementation)
                  example: 0.2
      responses:
        '200':
          description: Memory reinforced successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: true
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /memory/all:
    get:
      tags:
        - Memory
      summary: List all memories
      description: Retrieves a paginated list of all stored memories
      operationId: listMemories
      parameters:
        - name: l
          in: query
          description: Limit (number of results)
          schema:
            type: integer
            default: 100
            example: 100
        - name: u
          in: query
          description: Offset (skip n results)
          schema:
            type: integer
            default: 0
            example: 0
        - name: sector
          in: query
          description: Filter by sector
          schema:
            type: string
            enum: [episodic, semantic, procedural, emotional, reflective]
      responses:
        '200':
          description: List of memories
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Memory'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'

  /memory/{id}:
    get:
      tags:
        - Memory
      summary: Get memory by ID
      description: Retrieves a specific memory with all its details
      operationId: getMemory
      parameters:
        - name: id
          in: path
          required: true
          description: Memory ID
          schema:
            type: string
            example: "mem_abc123"
      responses:
        '200':
          description: Memory details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MemoryDetails'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

    delete:
      tags:
        - Memory
      summary: Delete memory
      description: Permanently deletes a memory and its associated vectors and waypoints
      operationId: deleteMemory
      parameters:
        - name: id
          in: path
          required: true
          description: Memory ID
          schema:
            type: string
            example: "mem_abc123"
      responses:
        '200':
          description: Memory deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: true
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  /memory/ingest:
    post:
      tags:
        - Ingestion
      summary: Ingest document
      description: Extracts content from a document and stores it as memories
      operationId: ingestDocument
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - content_type
                - data
              properties:
                content_type:
                  type: string
                  enum: [pdf, docx, txt, audio]
                  description: Type of document to ingest
                  example: pdf
                data:
                  type: string
                  description: Base64 encoded document data
                metadata:
                  type: object
                  additionalProperties: true
                config:
                  type: object
                  description: Ingestion configuration options
                  additionalProperties: true
      responses:
        '200':
          description: Document ingested successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  memories:
                    type: array
                    items:
                      type: object
                  chunks:
                    type: integer
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          description: Ingestion failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  err:
                    type: string
                    example: "ingestion_failed"
                  message:
                    type: string

  /memory/ingest/url:
    post:
      tags:
        - Ingestion
      summary: Ingest URL
      description: Fetches content from a URL and stores it as memories
      operationId: ingestURL
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - url
              properties:
                url:
                  type: string
                  format: uri
                  description: URL to fetch and ingest
                  example: "https://example.com/article"
                metadata:
                  type: object
                  additionalProperties: true
                config:
                  type: object
                  description: Ingestion configuration options
                  additionalProperties: true
      responses:
        '200':
          description: URL ingested successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  memories:
                    type: array
                    items:
                      type: object
                  chunks:
                    type: integer
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          description: URL ingestion failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  err:
                    type: string
                    example: "url_ingestion_failed"
                  message:
                    type: string

  /lgm/config:
    get:
      tags:
        - LangGraph
      summary: Get LangGraph configuration
      description: Returns LangGraph integration mode configuration
      operationId: getLangGraphConfig
      responses:
        '200':
          description: LangGraph configuration
          content:
            application/json:
              schema:
                type: object
                properties:
                  mode:
                    type: string
                    enum: [standard, langgraph]
                  namespace_default:
                    type: string
                    example: "default"
                  max_context:
                    type: integer
                    example: 50
                  reflective:
                    type: boolean
                    example: true
                  node_sector_map:
                    type: object
                    properties:
                      observe:
                        type: string
                        example: "episodic"
                      plan:
                        type: string
                        example: "semantic"
                      reflect:
                        type: string
                        example: "reflective"
                      act:
                        type: string
                        example: "procedural"
                      emotion:
                        type: string
                        example: "emotional"

  /lgm/store:
    post:
      tags:
        - LangGraph
      summary: Store LangGraph node memory
      description: Stores a LangGraph node output into HMD storage
      operationId: storeLangGraphMemory
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - node
                - content
              properties:
                node:
                  type: string
                  enum: [observe, plan, reflect, act, emotion]
                  description: LangGraph node name
                  example: "observe"
                content:
                  type: string
                  description: Node output content
                  example: "User clicked the submit button"
                namespace:
                  type: string
                  description: Memory namespace
                  example: "default"
                graph_id:
                  type: string
                  description: Graph session ID
                  example: "session_123"
                tags:
                  type: array
                  items:
                    type: string
                metadata:
                  type: object
                  additionalProperties: true
                reflective:
                  type: boolean
                  description: Whether to auto-generate reflection
                  example: true
      responses:
        '200':
          description: Memory stored successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  memory:
                    type: object
                    properties:
                      id:
                        type: string
                      node:
                        type: string
                      primary_sector:
                        type: string
                      sectors:
                        type: array
                        items:
                          type: string
                      namespace:
                        type: string
                      graph_id:
                        type: string
                        nullable: true
                      tags:
                        type: array
                        items:
                          type: string
                      chunks:
                        type: integer
                  reflection:
                    type: object
                    nullable: true
        '400':
          description: Store failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  err:
                    type: string
                    example: "lgm_store_failed"
                  message:
                    type: string
        '401':
          $ref: '#/components/responses/Unauthorized'

  /lgm/retrieve:
    post:
      tags:
        - LangGraph
      summary: Retrieve LangGraph node memories
      description: Retrieves memories scoped to a specific node/namespace/graph
      operationId: retrieveLangGraphMemories
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - node
              properties:
                node:
                  type: string
                  enum: [observe, plan, reflect, act, emotion]
                  description: LangGraph node name
                  example: "observe"
                query:
                  type: string
                  description: Optional semantic query
                  example: "recent interactions"
                namespace:
                  type: string
                  example: "default"
                graph_id:
                  type: string
                  example: "session_123"
                limit:
                  type: integer
                  default: 50
                  example: 50
                include_metadata:
                  type: boolean
                  default: false
      responses:
        '200':
          description: Retrieved memories
          content:
            application/json:
              schema:
                type: object
                properties:
                  node:
                    type: string
                  sector:
                    type: string
                  namespace:
                    type: string
                  graph_id:
                    type: string
                    nullable: true
                  query:
                    type: string
                    nullable: true
                  count:
                    type: integer
                  items:
                    type: array
                    items:
                      type: object
        '400':
          description: Retrieve failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  err:
                    type: string
                    example: "lgm_retrieve_failed"
                  message:
                    type: string
        '401':
          $ref: '#/components/responses/Unauthorized'

  /lgm/context:
    post:
      tags:
        - LangGraph
      summary: Get LangGraph context
      description: Fetches summarized multi-sector context for a graph session
      operationId: getLangGraphContext
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                namespace:
                  type: string
                  example: "default"
                graph_id:
                  type: string
                  example: "session_123"
                limit:
                  type: integer
                  default: 50
                  example: 50
      responses:
        '200':
          description: Graph context
          content:
            application/json:
              schema:
                type: object
                properties:
                  namespace:
                    type: string
                  graph_id:
                    type: string
                    nullable: true
                  limit:
                    type: integer
                  nodes:
                    type: array
                    items:
                      type: object
                      properties:
                        node:
                          type: string
                        sector:
                          type: string
                        items:
                          type: array
                          items:
                            type: object
                  summary:
                    type: string
                    description: Formatted summary of context
        '400':
          description: Context retrieval failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  err:
                    type: string
                    example: "lgm_context_failed"
                  message:
                    type: string
        '401':
          $ref: '#/components/responses/Unauthorized'

  /lgm/reflection:
    post:
      tags:
        - LangGraph
      summary: Create reflection
      description: Generates and stores higher-level reflections
      operationId: createLangGraphReflection
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                node:
                  type: string
                  default: "reflect"
                  example: "reflect"
                content:
                  type: string
                  description: Reflection content (auto-generated if not provided)
                namespace:
                  type: string
                  example: "default"
                graph_id:
                  type: string
                  example: "session_123"
                context_ids:
                  type: array
                  items:
                    type: string
                  description: Memory IDs used as context
      responses:
        '200':
          description: Reflection created
          content:
            application/json:
              schema:
                type: object
                properties:
                  memory:
                    type: object
                  reflection:
                    type: object
                    nullable: true
        '400':
          description: Reflection failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  err:
                    type: string
                    example: "lgm_reflection_failed"
                  message:
                    type: string
        '401':
          $ref: '#/components/responses/Unauthorized'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      description: Optional Bearer token authentication. Set OM_API_KEY in .env

  schemas:
    Memory:
      type: object
      properties:
        id:
          type: string
          example: "mem_abc123"
        content:
          type: string
          example: "User prefers dark mode"
        tags:
          type: array
          items:
            type: string
        metadata:
          type: object
          additionalProperties: true
        created_at:
          type: integer
          format: int64
          description: Unix timestamp
        updated_at:
          type: integer
          format: int64
          description: Unix timestamp
        last_seen_at:
          type: integer
          format: int64
          description: Unix timestamp
        salience:
          type: number
          format: float
          description: Memory importance score
        decay_lambda:
          type: number
          format: float
          description: Decay rate
        primary_sector:
          type: string
          enum: [episodic, semantic, procedural, emotional, reflective]
        version:
          type: integer

    MemoryDetails:
      allOf:
        - $ref: '#/components/schemas/Memory'
        - type: object
          properties:
            sectors:
              type: array
              items:
                type: string
              description: All sectors this memory belongs to

    MemoryMatch:
      allOf:
        - type: object
          properties:
            id:
              type: string
              example: "mem_abc123"
            content:
              type: string
              example: "User prefers dark mode"
            score:
              type: number
              format: float
              description: Similarity score (0-1)
              example: 0.87
            sectors:
              type: array
              items:
                type: string
            primary_sector:
              type: string
              enum: [episodic, semantic, procedural, emotional, reflective]
            path:
              type: array
              items:
                type: string
              description: Waypoint traversal path
            salience:
              type: number
              format: float
            last_seen_at:
              type: integer
              format: int64

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            type: object
            properties:
              err:
                type: string
                example: "content"

    Unauthorized:
      description: Unauthorized - invalid or missing API key
      content:
        application/json:
          schema:
            type: object
            properties:
              err:
                type: string
                example: "auth"

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            type: object
            properties:
              err:
                type: string
                example: "nf"

    InternalError:
      description: Internal server error
      content:
        application/json:
          schema:
            type: object
            properties:
              err:
                type: string
                example: "internal"
